openapi: 3.0.3
info:
  title: IPL Tracking - Data
  description: API description for Tracking microservice.
  version: 1.0.0
servers:
- url: http://localhost:8084/tracking
  description: Localhost - BT3 Dev
tags:
- name: Commons
  description: Commons definition
paths:
  /TelemetryData:
    get:
      tags:
      - TelemetryData
      summary: Get Telemetry Data list
      description: This operation is used to retrieve a list of Telemetry Data.
      operationId: list_telemetry_data
      responses:
        "200":
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListTelemetryDataResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "500":
          description: Unexpected errors not mapped to status codes mentioned above
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-openapi-router-controller: swagger_server.controllers.telemetry_data_controller
    post:
      tags:
      - TelemetryData
      summary: Create new Telemetry Data
      description: This operation is usedto create a new Telemetry Data on System.
      operationId: create_telemetry_data
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTelemetryDataRequest'
        required: true
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateTelemetryDataResponse'
        "400":
          description: Parameters missing in request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "409":
          description: There is already a Telemetry Data registered with same combination
            of vehicle and date
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "500":
          description: Unexpected errors not mapped to status codes mentioned above
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-openapi-router-controller: swagger_server.controllers.telemetry_data_controller
  /TelemetryData/{dataId}:
    get:
      tags:
      - TelemetryData
      summary: Get a single Telemetry Data's info
      description: This operation is used to retrieve the details of a specific Telemetry
        Data.
      operationId: get_telemetry_data
      parameters:
      - name: dataId
        in: path
        description: Unique identifier of the Data in the database
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/UUID'
        example: 0af401df-7d7a-1f36-817d-7b0a058d0003
      responses:
        "200":
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetTelemetryDataResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "404":
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "500":
          description: Unexpected errors not mapped to status codes mentioned above
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-openapi-router-controller: swagger_server.controllers.telemetry_data_controller
    put:
      tags:
      - TelemetryData
      summary: Update Telemetry Data's attributes
      description: This operation is used to update some of the Telemetry Data's attributes.
      operationId: update_telemetry_data
      parameters:
      - name: dataId
        in: path
        description: Unique identifier of the Customer in the database
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/UUID'
        example: 0af401df-7d7a-1f36-817d-7b0a058d0003
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateTelemetryDataRequest'
        required: true
      responses:
        "204":
          description: No Content
        "400":
          description: Parameters missing in request or request is malformed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "404":
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "409":
          description: There is already a Data registered with same combination of
            vehicle and date
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "500":
          description: Unexpected errors not mapped to status codes mentioned above
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-openapi-router-controller: swagger_server.controllers.telemetry_data_controller
    delete:
      tags:
      - TelemetryData
      summary: Delete Telemetry Data
      description: This operation is delete a Telemetry Data.
      operationId: delete_telemetry_data
      parameters:
      - name: dataId
        in: path
        description: Unique identifier of the Data in the database
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/UUID'
        example: 0af401df-7d7a-1f36-817d-7b0a058d0003
      responses:
        "204":
          description: No Content
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "404":
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "500":
          description: Unexpected errors not mapped to status codes mentioned above
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-openapi-router-controller: swagger_server.controllers.telemetry_data_controller
  /GeoData:
    get:
      tags:
      - GeoData
      summary: Get Geo Data list
      description: This operation is used to retrieve a list of Geo Data.
      operationId: list_geo_data
      responses:
        "200":
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListGeoDataResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "500":
          description: Unexpected errors not mapped to status codes mentioned above
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-openapi-router-controller: swagger_server.controllers.geo_data_controller
    post:
      tags:
      - GeoData
      summary: Create new Geo Data
      description: This operation is usedto create a new Geo Data on System.
      operationId: create_geo_data
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateGeoDataRequest'
        required: true
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateGeoDataResponse'
        "400":
          description: Parameters missing in request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "409":
          description: There is already a Geo Data registered with same combination
            of vehicle and date
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "500":
          description: Unexpected errors not mapped to status codes mentioned above
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-openapi-router-controller: swagger_server.controllers.geo_data_controller
  /GeoData/{dataId}:
    get:
      tags:
      - GeoData
      summary: Get a single Geo Data's info
      description: This operation is used to retrieve the details of a specific Geo
        Data.
      operationId: get_geo_data
      parameters:
      - name: dataId
        in: path
        description: Unique identifier of the Data in the database
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/UUID'
        example: 0af401df-7d7a-1f36-817d-7b0a058d0003
      responses:
        "200":
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetGeoDataResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "404":
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "500":
          description: Unexpected errors not mapped to status codes mentioned above
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-openapi-router-controller: swagger_server.controllers.geo_data_controller
    put:
      tags:
      - GeoData
      summary: Update Geo Data's attributes
      description: This operation is used to update some of the Geo Data's attributes.
      operationId: update_geo_data
      parameters:
      - name: dataId
        in: path
        description: Unique identifier of the Data in the database
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/UUID'
        example: 0af401df-7d7a-1f36-817d-7b0a058d0003
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateGeoDataRequest'
        required: true
      responses:
        "204":
          description: No Content
        "400":
          description: Parameters missing in request or request is malformed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "404":
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "409":
          description: There is already a Data registered with same combination of
            vehicle and date
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "500":
          description: Unexpected errors not mapped to status codes mentioned above
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-openapi-router-controller: swagger_server.controllers.geo_data_controller
    delete:
      tags:
      - GeoData
      summary: Delete Geo Data
      description: This operation is delete a Geo Data.
      operationId: delete_geo_data
      parameters:
      - name: dataId
        in: path
        description: Unique identifier of the Data in the database
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/UUID'
        example: 0af401df-7d7a-1f36-817d-7b0a058d0003
      responses:
        "204":
          description: No Content
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "404":
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "500":
          description: Unexpected errors not mapped to status codes mentioned above
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-openapi-router-controller: swagger_server.controllers.geo_data_controller
components:
  schemas:
    Data:
      required:
      - vehicleId
      type: object
      properties:
        dataId:
          $ref: '#/components/schemas/UUID'
        vehicleId:
          $ref: '#/components/schemas/UUID'
        time:
          type: string
          description: Data collection date
          format: date-time
          example: 2017-07-21T17:32:28Z
    GetTelemetryDataResponse:
      allOf:
      - $ref: '#/components/schemas/Data'
      - required:
        - sensor_type
        - value
        type: object
        properties:
          sensor_type:
            $ref: '#/components/schemas/EnumSensorType'
          value:
            type: number
            description: Sensor value
            example: 1
    GetGeoDataResponse:
      allOf:
      - $ref: '#/components/schemas/Data'
      - required:
        - altimeter
        - latitude
        - longitude
        type: object
        properties:
          latitude:
            type: string
          longitude:
            type: string
          altimeter:
            type: string
    ListTelemetryDataResponse:
      required:
      - content
      - totalResults
      type: object
      properties:
        content:
          type: array
          description: list of paged items
          items:
            $ref: '#/components/schemas/GetTelemetryDataResponse'
        totalResults:
          type: integer
          description: total number of records
          format: int64
          example: 50
      description: generic paged response
      example:
        totalResults: 50
        content:
        - ""
        - ""
    ListGeoDataResponse:
      required:
      - content
      - totalResults
      type: object
      properties:
        content:
          type: array
          description: list of paged items
          items:
            $ref: '#/components/schemas/GetGeoDataResponse'
        totalResults:
          type: integer
          description: total number of records
          format: int64
          example: 50
      description: generic paged response
      example:
        totalResults: 50
        content:
        - ""
        - ""
    CreateTelemetryDataRequest:
      required:
      - sensor_type
      - value
      - vehicleId
      type: object
      properties:
        dataId:
          $ref: '#/components/schemas/UUID'
        vehicleId:
          $ref: '#/components/schemas/UUID'
        time:
          type: string
          description: Data collection date
          format: date-time
          example: 2017-07-21T17:32:28Z
        sensor_type:
          $ref: '#/components/schemas/EnumSensorType'
        value:
          type: number
          description: Sensor value
          example: 1
    CreateTelemetryDataResponse:
      required:
      - dataId
      type: object
      properties:
        dataId:
          $ref: '#/components/schemas/UUID'
      example:
        customerId: 0af401df-7d7a-1f36-817d-7b0a058d0003
    CreateGeoDataRequest:
      required:
      - altimeter
      - latitude
      - longitude
      type: object
      properties:
        dataId:
          $ref: '#/components/schemas/UUID'
        vehicleId:
          $ref: '#/components/schemas/UUID'
        time:
          type: string
          description: Data collection date
          format: date-time
          example: 2017-07-21T17:32:28Z
        latitude:
          type: string
        longitude:
          type: string
        altimeter:
          type: string
    CreateGeoDataResponse:
      required:
      - dataId
      type: object
      properties:
        dataId:
          $ref: '#/components/schemas/UUID'
      example:
        customerId: 0af401df-7d7a-1f36-817d-7b0a058d0003
    UpdateTelemetryDataRequest:
      type: object
      properties:
        time:
          type: string
          description: Data collection date
          format: date-time
          example: 2017-07-21T17:32:28Z
        sensor_type:
          $ref: '#/components/schemas/EnumSensorType'
        value:
          type: number
          description: Sensor value
          example: 1
    UpdateGeoDataRequest:
      type: object
      properties:
        time:
          type: string
          description: Data collection date
          format: date-time
          example: 2017-07-21T17:32:28Z
        latitude:
          type: string
        longitude:
          type: string
        altimeter:
          type: string
    EnumSensorType:
      type: string
      description: type of Sensor
      enum:
      - RPM
      - ODOMETER
      - SPEED
    ErrorResponse:
      required:
      - errorCode
      - errorMessage
      - errorType
      type: object
      properties:
        code:
          type: string
          description: Application error code
          example: XYZ0001
        type:
          $ref: '#/components/schemas/ErrorTypeEnum'
        message:
          type: string
          description: Short error explanation
          example: Unauthorized
        details:
          type: string
          description: Short error detail
          example: Parameter X has invalid value
    ErrorTypeEnum:
      type: string
      description: Error Type
      enum:
      - PERSISTENCE
      - BUSINESS
      - COMMUNICATION
      - UNKNOWN
    UUID:
      pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"
      type: string
      example: 0af401df-7d7a-1f36-817d-7b0a058d0003
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
      x-basicInfoFunc: swagger_server.controllers.authorization_controller.check_basicAuth

